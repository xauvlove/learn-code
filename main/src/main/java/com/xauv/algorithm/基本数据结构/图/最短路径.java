package com.xauv.algorithm.基本数据结构.图;
/*
       /\   /\             /\.__                      
___  __)/___)/  __ _____  _)/|  |   _______  __ ____  
\  \/  /\__  \ |  |  \  \/ / |  |  /  _ \  \/ // __ \ 
 >    <  / __ \|  |  /\   /  |  |_(  <_> )   /\  ___/ 
/__/\_ \(____  /____/  \_/   |____/\____/ \_/  \___  >
      \/     \/                                    \/
*/

/**
 *
 * @Date 2022/10/26 12:33
 * @Author Administrator
 * @Package com.xauv.algorithm.基本数据结构.图
 * @Desc
 *
 * 两个顶点之间权值之和最小的路径
 *
 * 有向图 无向图都可用，但不能有负权环
 *
 * 比如有图：
 *
 *           A ——20——— B ——17——— C
 *           │         │
 *           26        46
 *           │         │
 *           C ———98—— D ——33——— E
 *
 *
 * A -> B 最短路径 20
 * A -> E 最短路径 20 +46 +33
 *
 * 无权图，最短路径：无权图代表每条边权值为 1，边数最少即最短
 *
 *           A ————— B ————— C
 *           │       │
 *           │       │
 *           │       │
 *           C ————— D ————— E
 *
 *
 * 有负权边，但没有负权环时，也有最短路径
 *
 * B -> C 是负权边，但不形成环，可以有最短路径
 *
 *           A ——20——— B —— -17 ——— C
 *           │         │
 *           26       46
 *           │         │
 *           C ———98—— D ———33———— E
 *
 *
 *
 * B -> D 这条边是负权边，但他形成了环，没有最短路径
 *
 *           A ——20——— B ——17——— C
 *           │         │
 *           26       -46
 *           │         │
 *           C ———98—— D ——33——— E
 *
 *
 *
 * —————————————— 最短路径算法 ————————————————
 *
 * 单源头最短路径算法（从一个顶点开始到其他顶点的算法）
 * 1.Dijkstra 迪杰斯特拉算法
 * 使用前提：不能有负权【边】，负权环更不能有
 *
 * 过程：
 * 从一个顶点开始，不断对其出边进行松弛操作
 *
 *
 * 2.Bellman-Ford 贝尔曼-福特算法
 *
 *
 *
 *
 * 多源头最短路径算法（从多个源头开始到其他节点的算法）
 * 1.Floyd 佛洛依德算法
 *
 *
 *
 *
 */
public class 最短路径 {


}

package com.xauv.algorithm.算法.动态规划;
/*
       /\   /\             /\.__                      
___  __)/___)/  __ _____  _)/|  |   _______  __ ____  
\  \/  /\__  \ |  |  \  \/ / |  |  /  _ \  \/ // __ \ 
 >    <  / __ \|  |  /\   /  |  |_(  <_> )   /\  ___/ 
/__/\_ \(____  /____/  \_/   |____/\____/ \_/  \___  >
      \/     \/                                    \/
*/

/**
 * @Date 2022/10/30 13:52
 * @Author Administrator
 * @Package com.xauv.algorithm.算法.动态规划
 * @Desc
 *
 * 求解最优化问题的常用策略
 *
 * 通常使用套路：一步一步游湖
 *
 * 问题优化思路
 * step1: 暴力递归：会出现很多重叠子问题
 * step2: 记忆化搜索，将子问题的解记录下来
 * step3: 递推
 *
 * 动态规划把所有情况都考虑了，因此可以求出最优解
 *
 *
 * 动态规划，动态理解为：会变化的状态
 * 1.定义状态，状态是原问题、子问题的解
 *
 * 2.设置初始状态 dp[0] dp[n] 之类的
 * 设置已知的子问题的解
 *
 * 3.确定状态转移方程，进行递推
 * 比如确定 dp[i] 和 dp[i-1]的关系
 *
 */
public class 动态规划 {
}
